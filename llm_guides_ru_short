# Гайд 1: Общие принципы (Quick Reference)

## Ключевые правила

**LLM = конструктор, не архитектор**
- Ты определяешь ЧТО и КАК
- Конкретика важнее абстракции
- Итерации лучше одного большого запроса

**Задача готова для LLM если:**
- Описывается в 3-5 предложениях
- Понятен вход и выход
- Знаешь как проверить результат
- Можешь нарисовать на салфетке за 2 минуты

**НЕ подходит для LLM:**
- Архитектурные решения
- Критичная безопасность (auth, payments)
- Сложные алгоритмы
- Большие интеграции между системами

**Идеально для LLM:**
- Boilerplate код
- CRUD операции
- UI компоненты
- Формы и валидация
- Утилитарные функции

## Цикл работы

```
ПЛАНИРОВАНИЕ (30%) → ЗАПРОС (5%) → ПРОВЕРКА (20%) → 
ТЕСТ (25%) → ИТЕРАЦИЯ (20%)
```

Больше 3 итераций = задача была слишком большой.

---

# Гайд 2: Подготовка (Checklist)

## Оценка размера задачи

**Считай элементы:**

Фронтенд:
- Интерактивные элементы (кнопки, инпуты): 1-5 ✅ | 5-10 ⚠️ | >10 ❌
- useState хуков: 1-3 ✅ | 3-5 ⚠️ | >5 ❌
- JSX элементов: до 10 ✅ | 10-20 ⚠️ | >20 ❌

Бэкенд:
- Endpoints: 1-3 ✅ | 3-5 ⚠️ | >5 ❌
- Database queries в handler: 1-3 ✅ | 3-5 ⚠️ | >5 ❌
- Валидационных правил: до 7 ✅ | >7 ❌

**Временной тест:**
- < 5 минут объяснить → простая, отдавай LLM
- 5-15 минут → средняя, раздели на 2-3 части
- > 15 минут → сложная, раздели на 5+ частей

## Декомпозиция: метод "Слои"

```
Слой 1: Базовая структура (HTML/routing)
Слой 2: Стилизация и layout
Слой 3: Интерактивность и state
Слой 4: API интеграция
Слой 5: Полировка (анимации, edge cases)
```

**Отдавай LLM максимум 2 слоя за раз.**

## 5 вопросов перед промптом

1. Что пользователь видит? (UI/Output)
2. Что пользователь делает? (Actions)
3. Откуда данные? (Input)
4. Куда данные? (Destination)
5. Что может пойти не так? (Errors)

**Ответ "не знаю" → задача не готова.**

## Матрица зависимостей

```
Компонент     | Зависит от  | Порядок
--------------|-------------|--------
API client    | -           | 1
Types         | -           | 2
UserCard      | Types       | 3
UserList      | UserCard    | 4
Dashboard     | UserList    | 5
```

**Правило: генерируй снизу вверх.**

## Подготовка материалов

**Обязательно:**
- Технический стек (React 18 + TS, Node + Express)
- Примеры данных (3-5 объектов)
- Референс UI (скриншот или описание)

**Для скриншотов:**
- 1 компонент = 1 скриншот
- Минимум 1080p
- Аннотируй важные части

**Для UI:**
- Hex коды цветов (#3B82F6)
- Конкретные размеры (padding: 16px)
- Responsive breakpoints

## Чек-лист готовности

- [ ] Могу описать в 3 предложениях
- [ ] Знаю технический стек
- [ ] Есть примеры данных
- [ ] Понимаю как проверить результат
- [ ] Нет зависимостей от недоделанного
- [ ] Не больше 9 требований

---

# Гайд 3: Промпт (Template)

## Базовый шаблон

```markdown
КОНТЕКСТ:
[Stack: React 18 + TypeScript, Tailwind CSS]

ЗАДАЧА:
[Создать [тип] который [действие] для [цель]]

ТРЕБОВАНИЯ:
1. [Конкретное требование]
2. [Конкретное требование]
...

ДАННЫЕ:
[Структура с примерами]

ДЕТАЛИ:
[Цвета, размеры, поведение]

НЕ ДЕЛАТЬ:
[Что точно не нужно]

ФОРМАТ:
[Как организовать файлы]
```

## Примеры компонентов промпта

**Контекст:**
```
Stack: React 18 + TypeScript + Vite
UI: Tailwind CSS (v3)
Icons: lucide-react
State: useState (без Redux)
```

**Задача (1 предложение):**
```
Создать карточку пользователя с кнопками Edit и Delete
```

**Требования (конкретные, до 7 пунктов):**
```
1. Отображать avatar, имя, email, роль
2. Кнопка Edit: иконка Pencil, видна если isEditable=true
3. Кнопка Delete: иконка Trash2, показывает confirm
4. Клик на avatar: вызывает onUserClick(userId)
5. Роль admin: золотая badge, user: серая badge
```

**Данные (с типами):**
```typescript
interface UserCardProps {
  user: {
    id: string;
    name: string;
    email: string;
    avatar?: string;
    role: 'admin' | 'user';
  };
  isEditable?: boolean;
  onEdit?: (userId: string) => void;
  onDelete?: (userId: string) => void;
}
```

**Детали:**
```
Цвета:
- Primary: #3B82F6
- Admin badge: #FBBF24
- User badge: #9CA3AF

Размеры:
- Width: 320px
- Padding: 16px
- Avatar: 64x64px круглый
- Border radius: 12px
```

**НЕ ДЕЛАТЬ (критично!):**
```
- Не добавляй React Router
- Не делай API вызовы
- Не используй localStorage
- Не добавляй анимации
```

**Формат:**
```
Один файл UserCard.tsx с default export
```

## Быстрые паттерны

**Модификация существующего:**
```markdown
ЗАДАЧА: Добавить [функцию] в [компонент]

СУЩЕСТВУЮЩИЙ КОД:
```[код]```

ИЗМЕНЕНИЯ:
1. Добавить: [что]
2. Изменить: [что]
3. Сохранить: [что не трогать]
```

**Исправление бага:**
```markdown
ПРОБЛЕМА: [что не работает]

КОД:
```[код с багом]```

ОЖИДАЮ: [что должно быть]
ПОЛУЧАЮ: [что происходит]

ШАГИ:
1. [как воспроизвести]
```

## Чек-лист промпта

- [ ] Указан технический стек
- [ ] Задача в 1 предложении
- [ ] Требования конкретные (не "красивая кнопка")
- [ ] Показана структура данных
- [ ] Указаны hex коды цветов
- [ ] Есть раздел "НЕ ДЕЛАТЬ"
- [ ] Промпт читается за 1 минуту

---

# Гайд 4: После генерации (Workflow)

## 1. Быстрая проверка (30 сек)

**Чек-лист:**
- [ ] Правильный стек?
- [ ] Адекватный размер кода?
- [ ] Нет синтаксических ошибок?
- [ ] Похоже на то что просил?

**Красные флаги (не запускай):**
- Код в 2-3 раза больше ожидаемого
- Использует библиотеки которых нет
- Много закомментированного кода

**Действие:** Попроси LLM переписать с ограничениями.

## 2. Тестирование (5-10 мин)

**Порядок тестов:**
1. Happy path (основной сценарий)
2. Edge cases (пустые данные, длинные строки)
3. Error handling (специально вызови ошибки)

**Веди лог проблем:**
```
❌ Delete не показывает confirm
❌ Avatar не отображается если нет URL
✅ Email валидация работает
```

## 3. Анализ кода (5 мин)

**Понимаешь ли код?**
- Можешь объяснить что делает каждая функция?
- Понятны названия переменных?

**Если НЕ понимаешь >20% кода:**
```
Объясни эту функцию:
```[код]```
Что она делает и почему так написана?
```

**Чек-лист качества:**
- [ ] Нет дублирования
- [ ] Функции делают одно действие
- [ ] Есть обработка ошибок
- [ ] Нет console.log

## 4. Итерации (1 изменение = 1 промпт)

**Приоритеты:**
1. Критичное: основная функция не работает
2. Важное: нет error handling, валидации
3. Nice to have: анимации, детали стилей

**Правило:**
- ✅ 1-2 итерации: нормально
- ⚠️ 3 итерации: задача была на грани
- ❌ >3 итераций: СТОП, переформулируй задачу

**Техника "изоляция":**
```markdown
ИЗМЕНИТЬ ТОЛЬКО:
Функцию handleDelete в строках 45-52

ОСТАВИТЬ:
Весь остальной код

ИЗМЕНЕНИЕ:
Добавить window.confirm перед удалением
```

## 5. Когда остановиться

**Задача выполнена если:**
- [ ] Основная функциональность работает
- [ ] Все требования реализованы
- [ ] Нет критичных багов
- [ ] Ты понимаешь код
- [ ] Код поддерживаемый

**Признаки перфекционизма (СТОП):**
- Работает, но хочешь "улучшить" без цели
- Переписываешь 3+ раз один код
- Оптимизируешь без проблем производительности

**Правило 80/20:** 80% результата за 20% усилий = отлично.

## 6. Сохранение результата

**Коммит:**
```
feat: add UserCard component

- Display user info with edit/delete
- Responsive Tailwind design
- AI-generated: Claude, manually fixed delete confirm

AI-assisted: initial code by Claude
```

**Документация:**
```typescript
/**
 * Generated: Claude LLM (2025-10-26)
 * Modified: Added confirm dialog
 * TODO: Add skeleton loading
 */
```

## 7. Обучение на ошибках

**Лог проблем:**
```markdown
## 2025-10-26: UserCard

ПРОБЛЕМЫ:
1. Нет confirm dialog
   → РЕШЕНИЕ: Явно писать "show confirm"

2. Цвета не совпали
   → РЕШЕНИЕ: Указывать hex коды

ВРЕМЯ: 25 мин (ожидал 15)
ИТЕРАЦИЙ: 3

ВЫВОДЫ:
- Детальнее описывать интерактивность
- Указывать ограничение размера кода
```

**Обновление шаблона:**
```markdown
v2.1: + Добавил секцию "Интерактивность"
      + Всегда hex коды
      + Ограничение "макс X строк"
```

## Итоговый workflow

```
1. ПРОВЕРКА (30 сек)
   ↓
2. ТЕСТ (5-10 мин)
   ↓
3. АНАЛИЗ (5 мин)
   ↓
   OK? → ДА → Коммит
   ↓ НЕТ
4. ИТЕРАЦИЯ (1 изменение)
   ↓
   >3 итераций? → СТОП → Переформулируй
```

## Частые ошибки

**❌ Плохо:**
- "Сделай красивую форму"
- Много требований в 1 промпт
- Рефакторинг через LLM больших кусков
- Больше 3 итераций без переосмысления

**✅ Хорошо:**
- "Форма с email, password, submit кнопкой"
- 1 промпт = 1 изменение
- Маленькие итерации с изоляцией
- После 3 итераций → новый промпт

---

# Шпаргалка: Быстрый старт

## Перед запросом

```
1. Считай элементы (до 5 интерактивных = ОК)
2. 5 вопросов: вижу? делаю? откуда? куда? ошибки?
3. Могу описать в 3 предложениях? ДА → go
```

## Промпт

```
КОНТЕКСТ: [стек]
ЗАДАЧА: [1 предложение]
ТРЕБОВАНИЯ: [до 7 пунктов]
ДАННЫЕ: [структура с примером]
ДЕТАЛИ: [цвета hex, размеры px]
НЕ ДЕЛАТЬ: [критично!]
```

## После генерации

```
1. Проверка 30 сек → флаги? → переспроси
2. Тест 10 мин → лог проблем
3. Анализ 5 мин → понимаю код?
4. Итерации → 1 промпт = 1 изменение
5. >3 итераций → СТОП → переформулируй
6. Работает → коммит → лог выводов
```

## Золотые правила

1. Конкретика > абстракция
2. Итерации > один большой запрос
3. 1 промпт = 1 изменение
4. >3 итераций = задача слишком большая
5. Не понимаешь код = проблема
6. 80/20 = достаточно хорошо
